"""ArgumentParser for this program."""
from argparse import Action
from argparse import ArgumentParser
from argparse import Namespace
import logging
from pathlib import Path
import shlex
import sys

from wp2tt.version import WP2TT_VERSION

__all__ = ["Wp2ttParser"]


class Wp2ttParser(ArgumentParser):
    """ArgumentParser for this program."""
    SPECIAL_GROUP = "(autogenerated)"
    DEFAULT_BASE = SPECIAL_GROUP + "/(Basic Style)"

    def __init__(self):
        super().__init__(
            description=f"Word Processor to InDesign Tagged Text, v{WP2TT_VERSION}"
        )
        self.add_argument("input", type=Path, help="Input word processor file")
        self.add_argument(
            "output", type=Path, nargs="?", help="InDesign Tagged Text file"
        )
        self.add_argument(
            "-a",
            "--append",
            type=Path,
            metavar="INPUT",
            nargs="*",
            help="Concatenate more input file(s) to the same output",
        )
        self.add_argument(
            "-s",
            "--stop-at",
            metavar="TEXT",
            required=False,
            help="Stop importing when TEXT is found",
        )
        self.add_argument(
            "-c",
            "--base-character-style",
            metavar="NAME",
            default=self.DEFAULT_BASE,
            help="Base all character styles on this",
        )
        self.add_argument(
            "-p",
            "--base-paragraph-style",
            metavar="NAME",
            default=self.DEFAULT_BASE,
            help="Base all paragraph styles on this",
        )
        self.add_argument(
            "-v",
            "--style-to-variable",
            metavar="STYLE=VARIABLE",
            nargs="+",
            action=Parsedict,
            help="Map paragraph styles to document variables",
        )

        group = self.add_mutually_exclusive_group()
        group.add_argument(
            "-m",
            "--manual",
            action="store_true",
            help="Create styles for some manual formatting",
        )
        group.add_argument(
            "-M",
            "--manual-light",
            action="store_true",
            help="Like --manual, but only for character styles",
        )

        self.add_argument(
            "-f",
            "--fresh-start",
            action="store_true",
            help="Do not read any existing settings",
        )
        self.add_argument(
            "-d",
            "--debug",
            action="store_true",
            help="Print interesting debug information",
        )
        self.add_argument(
            "-C",
            "--convert-comments",
            action="store_true",
            help="Convert comments to balloons",
        )
        self.add_argument(
            "--no-rerunner",
            action="store_true",
            help="Do not (over)write the rerruner script",
        )
        self.add_argument(
            "--direction",
            choices=["RTL", "LTR"],
            default="RTL",
            help="Default text direction",
        )
        self.add_argument(
            "--maqaf",
            action="store_true",
            help="Convert equal sign to Hebrew maqaf",
        )
        self.add_argument(
            "--vav",
            action="store_true",
            help="Convert to VAV WITH HOLAM ligature",
        )
        self.add_argument(
            "--no-emf2svg",
            action="store_true",
            help="Don't convert EMF images to SVG using emf2svg-conv",
        )
        self.add_argument(
            "--no-svg2png",
            action="store_true",
            help="Don't save png copies of generated SVG file",
        )
        self.add_argument(
            "--formula-font-size",
            type=int,
            help="Font size in points for converted formulas",
        )
        group = self.add_mutually_exclusive_group()
        group.add_argument(
            "--no-cache",
            action="store_true",
            help="Do not attempt to cache converted files",
        )
        group.add_argument(
            "--cache",
            type=Path,
            help="Cache directory for converted files like SVG",
        )
        group = self.add_mutually_exclusive_group()
        group.add_argument(
            "--remove-old-images",
            action="store_true",
            help="Remove all old img-* folders",
        )
        group.add_argument(
            "--remove-old-images-if-indesign",
            "-R",
            action="store_true",
            help="Remove all old img-* folders iff running inside InDesign",
        )

    def write_rerunner(self, rerunner: Path, args: Namespace):
        """Write script to rerun the program"""
        logging.info("Writing %s", rerunner)
        with open(rerunner, "w", encoding="UTF-8") as fobj:
            fobj.write("#!/bin/bash\n# AUTOGENERATED FILE, DO NOT EDIT.\n\n")
            cli = [
                self._quote(sys.argv[0]),
                self._quote(args.input),
            ]
            if args.output:
                cli.append(self._quote(args.output))
            cli.append('"$@"')  # Has to come before the dashes
            self._add_str(cli, args, "stop_at")
            self._add_str(cli, args, "base_character_style", self.DEFAULT_BASE)
            self._add_str(cli, args, "base_paragraph_style", self.DEFAULT_BASE)
            self._add_path(cli, args, "cache")
            self._add_flag(cli, args, "debug")
            self._add_flag(cli, args, "manual")
            self._add_flag(cli, args, "manual_light")
            self._add_flag(cli, args, "maqaf")
            self._add_flag(cli, args, "no_cache")
            self._add_flag(cli, args, "no_emf2svg")
            self._add_flag(cli, args, "no_svg2png")
            self._add_flag(cli, args, "remove_old_images")
            self._add_flag(cli, args, "remove_old_images_if_indesign")
            self._add_flag(cli, args, "vav")
            if args.formula_font_size:
                cli.append("--formula-font-size")
                cli.append(str(args.formula_font_size))
            if args.append:
                cli.append("--append")
                cli.extend([self._quote(path) for path in args.append])
            if args.style_to_variable:
                cli.append("--style-to-variable")
                cli.extend(
                    shlex.quote(f"{k}={v}")
                    for k, v in args.style_to_variable.items()
                )
            log_fn = Path(f"{rerunner}.output")
            cli.append("2>&1")
            cli.append("|tee")
            cli.append(str(log_fn.absolute()))
            fobj.write(" ".join(map(str, cli)))
            fobj.write("\n")
        rerunner.chmod(0o755)

    @classmethod
    def _add_flag(cls, cli: list[str], args: Namespace, name: str):
        """Helper to add a flag if it was set"""
        if getattr(args, name):
            cli.append(cls._argify(name))

    @classmethod
    def _add_path(cls, cli: list[str], args: Namespace, name: str):
        """Helper to add a path if it was set"""
        if (value := getattr(args, name)):
            cli.append(cls._argify(name))
            cli.append(cls._quote(value))

    @classmethod
    def _add_str(cls, cli: list[str], args: Namespace, name: str, default: str | None = None):
        """Helper to add a string if it was set"""
        value = getattr(args, name)
        if default is None:
            if not value:
                return
        elif value == default:
            return
        cli.append(cls._argify(name))
        cli.append(shlex.quote(value))

    @classmethod
    def _argify(cls, name):
        """Convert argument name to command-line argument"""
        return "--" + name.replace("_", "-")

    @classmethod
    def _quote(cls, path: Path | str) -> str:
        """Courtesy wrapper"""
        if isinstance(path, str):
            path = Path(path)
        return shlex.quote(str(path.absolute()))


class Parsedict(Action):
    """Helper class to convert KEY=VALUE pairs to a dict."""

    def __call__(self, parser, namespace, values, *args, **kwargs):
        setattr(namespace, self.dest, dict(val.split("=", 1) for val in values))
