"""ArgumentParser for this program."""
import argparse
import logging
from pathlib import Path
import shlex
import sys

from wp2tt.version import WP2TT_VERSION

__all__ = ["Wp2ttParser"]


class Parsedict(argparse.Action):
    """Helper class to convert KEY=VALUE pairs to a dict."""

    def __call__(self, parser, namespace, values, *args, **kwargs):
        setattr(namespace, self.dest, dict(val.split("=", 1) for val in values))


class Wp2ttParser(argparse.ArgumentParser):
    """ArgumentParser for this program."""
    SPECIAL_GROUP = "(autogenerated)"
    DEFAULT_BASE = SPECIAL_GROUP + "/(Basic Style)"

    def __init__(self):
        super().__init__(
            description=f"Word Processor to InDesign Tagged Text, v{WP2TT_VERSION}"
        )
        self.add_argument("input", type=Path, help="Input word processor file")
        self.add_argument(
            "output", type=Path, nargs="?", help="InDesign Tagged Text file"
        )
        self.add_argument(
            "-a",
            "--append",
            type=Path,
            metavar="INPUT",
            nargs="*",
            help="Concatenate more input file(s) to the same output",
        )
        self.add_argument(
            "-s",
            "--stop-at",
            metavar="TEXT",
            required=False,
            help="Stop importing when TEXT is found",
        )
        self.add_argument(
            "-c",
            "--base-character-style",
            metavar="NAME",
            default=self.DEFAULT_BASE,
            help="Base all character styles on this",
        )
        self.add_argument(
            "-p",
            "--base-paragraph-style",
            metavar="NAME",
            default=self.DEFAULT_BASE,
            help="Base all paragraph styles on this",
        )
        self.add_argument(
            "-v",
            "--style-to-variable",
            metavar="STYLE=VARIABLE",
            nargs="+",
            action=Parsedict,
            help="Map paragraph styles to document variables",
        )

        group = self.add_mutually_exclusive_group()
        group.add_argument(
            "-m",
            "--manual",
            action="store_true",
            help="Create styles for some manual formatting",
        )
        group.add_argument(
            "-M",
            "--manual-light",
            action="store_true",
            help="Like --manual, but only for character styles",
        )

        self.add_argument(
            "-f",
            "--fresh-start",
            action="store_true",
            help="Do not read any existing settings",
        )
        self.add_argument(
            "-d",
            "--debug",
            action="store_true",
            help="Print interesting debug information",
        )
        self.add_argument(
            "-C",
            "--convert-comments",
            action="store_true",
            help="Convert comments to balloons",
        )
        self.add_argument(
            "--no-rerunner",
            action="store_true",
            help="Do not (over)write the rerruner script",
        )
        self.add_argument(
            "--direction",
            choices=["RTL", "LTR"],
            default="RTL",
            help="Default text direction",
        )
        self.add_argument(
            "--maqaf",
            action="store_true",
            help="Convert equal sign to Hebrew maqaf",
        )
        self.add_argument(
            "--vav",
            action="store_true",
            help="Convert to VAV WITH HOLAM ligature",
        )
        self.add_argument(
            "--no-emf2svg",
            action="store_true",
            help="Don't convert EMF images to SVG using emf2svg-conv",
        )
        self.add_argument(
            "--no-svg2png",
            action="store_true",
            help="Don't save png copies of generated SVG file",
        )
        self.add_argument(
            "--formula-font-size",
            type=int,
            help="Font size in points for converted formulas",
        )
        group = self.add_mutually_exclusive_group()
        group.add_argument(
            "--no-cache",
            action="store_true",
            help="Do not attempt to cache converted files",
        )
        group.add_argument(
            "--cache",
            type=Path,
            help="Cache directory for converted files like SVG",
        )

    def write_rerunner(self, rerunner: Path, args: argparse.Namespace):
        """Write script to rerun the program"""
        logging.info("Writing %s", rerunner)
        with open(rerunner, "w", encoding="UTF-8") as fobj:
            fobj.write("#!/bin/bash\n# AUTOGENERATED FILE, DO NOT EDIT.\n\n")
            cli = [
                self.quote_fn(sys.argv[0]),
                self.quote_fn(args.input),
            ]
            if args.output:
                cli.append(self.quote_fn(args.output))
            cli.append('"$@"')  # Has to come before the dashes
            if args.stop_at:
                cli.extend(["--stop-at", shlex.quote(args.stop_at)])
            if args.base_character_style != self.DEFAULT_BASE:
                cli.extend(
                    [
                        "--base-character-style",
                        shlex.quote(args.base_character_style),
                    ]
                )
            if args.base_paragraph_style != self.DEFAULT_BASE:
                cli.extend(
                    [
                        "--base-paragraph-style",
                        shlex.quote(args.base_paragraph_style),
                    ]
                )
            if args.style_to_variable:
                cli.append("--style-to-variable")
                cli.extend(
                    shlex.quote(f"{k}={v}")
                    for k, v in args.style_to_variable.items()
                )
            if args.manual:
                cli.append("--manual")
            elif args.manual_light:
                cli.append("--manual-light")
            if args.maqaf:
                cli.append("--maqaf")
            if args.vav:
                cli.append("--vav")
            if args.debug:
                cli.append("--debug")
            if args.no_svg2png:
                cli.append("--no-svg2png")
            if args.no_emf2svg:
                cli.append("--no-emf2svg")
            if args.no_cache:
                cli.append("--no-cache")
            if args.cache:
                cli.append("--cache")
                cli.append(self.quote_fn(args.cache))
            if args.formula_font_size:
                cli.append("--formula-font-size")
                cli.append(str(args.formula_font_size))
            if args.append:
                cli.append("--append")
                cli.extend([self.quote_fn(path) for path in args.append])
            log_fn = Path(f"{rerunner}.output")
            cli.append("2>&1")
            cli.append("|tee")
            cli.append(str(log_fn.absolute()))
            fobj.write(" ".join(map(str, cli)))
            fobj.write("\n")
        rerunner.chmod(0o755)

    @classmethod
    def quote_fn(cls, path: Path | str) -> str:
        """Courtesy wrapper"""
        if isinstance(path, str):
            path = Path(path)
        return shlex.quote(str(path.absolute()))
